// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "@prisma/client"
  output       = "./pothos-types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  email      String
  password   String
  posts      Post[]
  comments   Comment[]
  following  Follows[] @relation("follower")
  followedBy Follows[] @relation("following")
  likes      Like[]
}

model Post {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String
  image      String?
  authorId   Int
  author     User      @relation(fields: [authorId], references: [id])
  comments   Comment[]
  likes      Like[]
  likeStatus Boolean   @default(false)
  likeCount  Int       @default(0)
}

model Comment {
  id        Int      @id @default(autoincrement())
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Follows {
  followerId  Int
  followingId Int
  follower    User @relation(name: "follower", fields: [followerId], references: [id])
  following   User @relation(name: "following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

// In case person A follows person B
// person A is follower and person B is following
// so person A following increases and person B follower increases

model Like {
  id        Int      @id @default(autoincrement())
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}
